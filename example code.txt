(do 

  //this is a comment!

  //for-loop
    (def for 
     (fun (i f)
      (do 
         (def _for (fun (j) 
           (if (= j 10) 
               "done" 
               (do (f j) (_for (+ 1 j))))))
         (_for 0)
      )
     )
  )

  (for 10 (fun (i) (print (+ "hello" i))))
  (def x 0)
  (def ++ (fun (x) (mut x (+ x 1))))
  (print (++ (++ (++ (++ x)))))
  (mut ++ (fun (x) (mut x (- x 1))))
  (def y 0)
  (for 10 (fun (i) (mut y (++ y))))
  (print y)
  
    // closure object
  (def x (fun (a b c) (do
    (def y a)
    (def z b)
    (def u c)
    (fun (a)
      (if (= a "y") y 
      (if (= a "z") z
      (if (= a "yB") (mut y (+ y "B"))
      (if (= a "x") (u b)
       "unknown"))))
    )
  )))

  (def y (x "a" "b" "c"))

   (print (y "y"))

  (def z (x "3" "4" (fun (a) (print (+ a "m")))))
  (print (z "y"))
  (print (z "z"))
  (z "yB")
  (print (z "y"))
  (z "x")


  (for 10 (fun (i) (print (+ "hello" i))))
  (def x 0)
  (def ++ (fun (x) (mut x (+ x 1))))
  (print (++ (++ (++ (++ x)))))
  (mut ++ (fun (x) (mut x (- x 1))))
  (def y 0)
  (for 10 (fun (i) (mut y (++ y))))
  (print y)


  (def first-equals (fun (L e) (= e (car L))))
  (def skip-two (fun (L) (cdr (cdr L))))
  (def second (fun (L) (car (cdr L))))
  (def cons-2 (fun (a b L) (cons a (cons b L))))
  
  (def list-equals (fun (A B)
       (if (and (empty A) (empty B)) true
       (if (or (empty A) (or (empty B))) false 
           (and (= (car A) (car B)) 
                (list-equals (cdr A) (cdr B)))
       ))
  ))

  (def list-A (list 1 2 3))
  (def list-B (list 1 2))
  (def list-C (list 4 5 6))

  (print (= false (list-equals list-A list-B)))
  (print (= true (list-equals list-A list-A)))
  (print (= false (list-equals list-A list-C)))
  
  (def list-D (list 1 2 3 4 5 6))

  (def join (fun (L) 
    (if (empty L) ""
        (+ (car L) (join (cdr L)))
    )
  )) 

  (print (join list-D))

  (def take-odds (fun (L)
       (if (empty L) @
           (cons (car L) (take-odds (skip-two L)))
       )
  ))

  (print (join (take-odds list-D))) 

  (def all (fun (L f) 
    (if (empty L) true
	    (and (f (car L)) 
	         (all (cdr L) f))
	)
  ))

  (def any (fun (L f) 
    (if (empty L) true
	    (or (f (car L)) 
		(any (cdr L) f))
	)
  ))
  
  (print (+ "All:" (all list-D 
    (fun (i) (> i 0)))))

  (print (+ "All:" (all list-D
    (fun (i) (< i 0)))))
  
  (print (+ "Any:" (any list-D 
    (fun (i) (> i 0)))))

  (print (+ "Any:" (any list-D
    (fun (i) (< i 0)))))
  
  (def map (fun (L)
    (do 
      (def get (fun (L k)
             (if (empty L) "no-entry-for-key"
             (if (first-equals L k) (second L) 
                 (get (skip-two L) k)
		     ))
      ))
      (def has (fun (L k) 
        (if (empty L) false
        (if (first-equals L k) true 
            (has (skip-two L) k)
        ))
      ))
      (fun (method key ?val) 
           (if (= method "get") (get L key) 
           (if (= method "has") (has L key)
           (if (= method "put") (mut L (cons-2 key ?val L))
               (+ "no such method" method)
           ))))
  )))

  (def my-list (list "a" "b" "c" "d"))
  (def my-map (map my-list))

  (print (my-map "get" "a"))
  (print (my-map "get" "b"))
  (print (my-map "get" "c"))
  (print (my-map "get" "d"))

  (print (+ "C:" (my-map "has" "c")))
  (print (+ "A:" (my-map "has" "a")))
  (print (+ "B:" (my-map "has" "b")))
  (print (+ "C:" (my-map "has" "c")))
  (print (+ "D:" (my-map "has" "d")))
  (my-map "put" "d" "X")
  (print (+ "D:" (my-map "has" "d")))
  (print (+ "D:" (my-map "get" "d")))

  (print (my-map "non-existant-method" "key"))
)
	